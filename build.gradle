/*
 * Copyright 2014 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY Michael Hoffer <info@michaelhoffer.de> "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Michael Hoffer <info@michaelhoffer.de> OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Michael Hoffer <info@michaelhoffer.de>.
 */

buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.2.3')
    }
}

plugins {
//    id 'com.github.hierynomus.license' version '0.13.1'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.6.1'
    id 'com.jfrog.bintray' version '1.7.2'
    id 'com.github.ben-manes.versions' version '0.13.0'
}

apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}
	
task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

repositories {
    mavenCentral()
    jcenter()

    // TODO: optionally add custom maven repositories here
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
    
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.2.3')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.3.2.3', classifier: 'javadoc')

    compile "org.jogamp.gluegen:gluegen-rt:2.3.2"
    compile "org.jogamp.jogl:jogl-all:2.3.2"

    compile 'org.joml:joml:1.9.9'

    compile 'eu.mihosoft.vvecmath:vvecmath:0.3.8'

    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies

    // local dependencies can be added by putting them to the lib/jar folder
    // compile files("lib/jars/")
}

apply from: 'gradle/publishing.gradle'

def loadProperties(String sourceFileName) {
    
    def config = new Properties()
    def propFile = new File(projectDir,sourceFileName)
    
    if (propFile.isFile()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext.set(property.key, property.value)
        }
    }
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {

//    // dependencies except VRL
//    from configurations.runtime.asFileTree.
//        filter({file->return !file.name.startsWith("vrl-0")}).
//        files.collect { zipTree(it) }

    // project class files compiled from source
    from files(sourceSets.main.output.classesDirs)
}

// loads the property file
loadProperties('build.properties')

String getVRLDir() {
    
    String result;
    
    if (vrldir.isEmpty()) {
        result = System.getProperty("user.home");
        result+= "/.vrl/"
        result+= eu.mihosoft.vrl.system.Constants.VERSION_MAJOR
        result+= "/default";
    } else {
        result = vrldir;
    }
    
    return result
}

// compiles and installs the vrl plugin to the specified folder
task installVRLPlugin(dependsOn: [clean,publicationVRLPluginJar]) {
    doLast {
        println(">> copying vrl plugin to: " + getVRLDir() + "/plugin-updates")

        copy {
            from buildDir.getPath() + "/libs/" + rootProject.name + ".vrlplugin"
            into getVRLDir() + "/plugin-updates/"
            include rootProject.name + ".vrlplugin"
            rename (rootProject.name + ".vrlplugin", rootProject.name + ".jar")
        }
    }
}
